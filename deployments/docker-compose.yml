version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: certify-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: certify_studio
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: certify-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: certify-neo4j
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: certify-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application API Server
  api:
    build:
      context: ..
      dockerfile: deployments/Dockerfile
    container_name: certify-api
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/certify_studio
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_AUTH=neo4j/password
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./exports:/app/exports
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    command: ["uvicorn", "certify_studio.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Celery Worker
  worker:
    build:
      context: ..
      dockerfile: deployments/Dockerfile
    container_name: certify-worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/certify_studio
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_AUTH=neo4j/password
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    volumes:
      - ./uploads:/app/uploads
      - ./exports:/app/exports
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - neo4j
      - qdrant
    command: ["celery", "-A", "certify_studio.integration.background", "worker", "--loglevel=info"]

  # Celery Beat (Scheduler)
  beat:
    build:
      context: ..
      dockerfile: deployments/Dockerfile
    container_name: certify-beat
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/certify_studio
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - postgres
      - redis
    command: ["celery", "-A", "certify_studio.integration.background", "beat", "--loglevel=info"]

  # Flower (Celery Monitoring)
  flower:
    image: mher/flower:latest
    container_name: certify-flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - FLOWER_PORT=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    command: ["celery", "--broker=redis://redis:6379/1", "flower"]

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  qdrant_data:
