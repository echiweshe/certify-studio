[project]
name = "certify-studio"
version = "0.1.0"
description = "AI-powered educational content generation platform"
readme = "README.md"
requires-python = ">=3.11,<3.13"  # Python 3.12 recommended
license = {text = "MIT"}
authors = [
    {name = "Certify Studio Team", email = "team@certifystudio.com"},
]
keywords = ["education", "ai", "content-generation", "certification", "training"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "aiosqlite>=0.19.0", # SQLite async support
    # Database
    "sqlalchemy>=2.0.23",
    "asyncpg>=0.29.0",
    "alembic>=1.13.0",
    # Caching and Queue
    "redis>=5.0.1",
    "celery>=5.3.4",
    # Authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    # AI/ML
    "openai>=1.6.0",
    "anthropic>=0.8.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "langchain-openai>=0.0.5",
    "langchain-anthropic>=0.1.1",
    "sentence-transformers>=2.2.2",
    "torch>=2.1.0",
    "numpy>=1.24.0",
    # Knowledge Graph
    "neo4j>=5.15.0",
    "chromadb>=0.4.20",
    "networkx>=3.2",
    "pyvis>=0.3.2",
    # Document Processing
    "pypdf>=3.17.0",
    "python-docx>=1.1.0",
    "beautifulsoup4>=4.12.0",
    "markdown>=3.5.0",
    "ebooklib>=0.18",
    "pytesseract>=0.3.10",
    "pdf2image>=1.16.3",
    # NLP
    "spacy>=3.7.0",
    "nltk>=3.8.1",
    # Vision & Graphics  
    "opencv-python>=4.8.0",
    "opencv-contrib-python>=4.8.0",
    "pillow>=10.1.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    
    # Audio Processing - Full suite for Python 3.12
    "soundfile>=0.12.0",
    "pydub>=0.25.0",
    "scipy>=1.11.0",
    "librosa>=0.10.1",
    "torchaudio>=2.1.0",
    "webrtcvad>=2.0.10",
    "pedalboard>=0.9.0",  # Windows users may need to install separately
    
    # Animation & Video
    "manim>=0.18.0",
    "moviepy>=1.0.3",
    "imageio>=2.31.0",
    "imageio-ffmpeg>=0.4.8",
    
    # File handling
    "aiofiles>=23.2.1",
    
    # Logging & Monitoring
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.43b0",
    "loguru>=0.7.2",
    "python-json-logger>=2.0.7", # For JSON logging format
    # Utils
    "httpx>=0.25.2",
    "tenacity>=8.2.3",
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    "pyyaml>=6.0",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    "ipython>=8.18.0",
]

aws = [
    "boto3>=1.34.0",
    "aioboto3>=12.1.0",
]

azure = [
    "azure-storage-blob>=12.19.0",
    "azure-identity>=1.15.0",
]

gcp = [
    "google-cloud-storage>=2.13.0",
    "google-cloud-aiplatform>=1.38.0",
]

windows = [
    # Additional Windows-compatible packages
    "pyaudio>=0.2.11",  # For real-time audio
    "python-sounddevice>=0.4.6",  # Alternative audio I/O
]

[project.scripts]
certify-studio = "certify_studio.main:main"
setup-knowledge = "certify_studio.knowledge.setup:main"

[project.urls]
Homepage = "https://github.com/certify-studio/certify-studio"
Documentation = "https://docs.certifystudio.com"
Repository = "https://github.com/certify-studio/certify-studio"
Issues = "https://github.com/certify-studio/certify-studio/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/certify_studio"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "README.md",
    "LICENSE",
]

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=certify_studio",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src/certify_studio"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
